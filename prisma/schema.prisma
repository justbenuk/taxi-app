generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  password          String
  emailVerified     DateTime?
  image             String             @default("/assets/profile.jpg")
  role              String             @default("user")
  position          String             @default("none")
  nationalInsurance String             @default("")
  contactNumber     String             @default("")
  dateOfBirth       String             @default("")
  emergencyContact  EmergencyContact[]
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyContact {
  id            String  @id @default(cuid())
  name          String
  contactNumber String
  relationship  String
  isPrimary     Boolean @default(false)
  User          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Image {
  id       String  @id @default(cuid())
  url      String
  key      String
  name     String
  customId String?
}

model Hero {
  id         String  @id @default(cuid())
  title      String
  image      String
  content    String?
  buttonLink String?
  buttonText String?
}

model Message {
  id      String  @id @default(cuid())
  name    String
  email   String
  phone   String?
  message String
}
